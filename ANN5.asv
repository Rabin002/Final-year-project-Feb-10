In = input_all;
T = SOC_all;

% Specify GPU device (optional, if you have multiple GPUs)
gpuDeviceID = 1; % Choose the GPU device ID (e.g., 1 for the first GPU)
gpuDevice(gpuDeviceID);

% Assuming you have a dataset with inputs (In) and targets (T)

% Specify the percentage for training, validation, and testing
trainPercentage = 70; % 70% for training
valPercentage = 15;   % 15% for validation
testPercentage = 15;  % 15% for testing

% Shuffle the indices of the dataset
rng('default');  % For reproducibility
indices = randperm(size(In, 1));

% Calculate the number of samples for each set
numTotalSamples = numel(indices);
numTrainSamples = round(trainPercentage / 100 * numTotalSamples);
numValSamples = round(valPercentage / 100 * numTotalSamples);
numTestSamples = round(testPercentage / 100 * numTotalSamples);

% Extract indices for training, validation, and testing sets
trainIndices = indices(1:numTrainSamples);
valIndices = indices(numTrainSamples + 1 : numTrainSamples + numValSamples);
testIndices = indices(numTrainSamples + numValSamples + 1 : end);

% Create training, validation, and testing sets
In_train = In(trainIndices, :);
T_train = T(trainIndices, :);

In_val = In(valIndices, :);
T_val = T(valIndices, :);

In_test = In(testIndices, :);
T_test = T(testIndices, :);

% Create and initialize the neural network
layers = [
    imageInputLayer([1 1 3]) % Input layer with 3 input nodes
    fullyConnectedLayer(64) % 64 neurons without activation function
    sigmoidLayer % Apply logistic sigmoid activation function
    fullyConnectedLayer(64) % 64 neurons without activation function
    tanhLayer % Apply hyperbolic tangent activation function
    fullyConnectedLayer(1) % Single neuron without activation function
    regressionLayer]; % Regression layer for output

options = trainingOptions('adam', ...
    'MaxEpochs', 5000, ...
    'InitialLearnRate', 0.01, ...
    'MiniBatchSize', 32, ...
    'Shuffle', 'every-epoch', ...
    'ValidationData', {In_val', T_val'}, ...
    'ValidationFrequency', 10, ...
    'Plots', 'training-progress', ...
    'Verbose', true);

% Train the network using the training set
net = trainNetwork(In_train', T_train', layers, options);

% Evaluate the network on the test set
output_test = predict(net, In_test');
% Evaluate the performance on the test set (you can add relevant evaluation metrics)
performance_test = immse(output_test', T_test');
disp(['Test Performance: ', num2str(performance_test)]);
